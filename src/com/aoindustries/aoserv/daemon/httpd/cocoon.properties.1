##############################################################################
#                          Cocoon Configuration file                         #
##############################################################################



##########################################
# Global Configurations                  #
##########################################

# Indicates whether or not Cocoon should be visible if
# the requested URI equals the specified one.
selfservlet.enabled = true
selfservlet.uri = /Cocoon.xml

# Indicates whether or not Cocoon should handle errors internally
# and format the error and the exception stack trace to the client
# or return the HTTP error code to the web server and let it handle it.
handle.errors.internally = true

# Indicates the log severity level
#log.level = emergency
#log.level = critical
log.level = error
#log.level = warning
#log.level = info
#log.level = debug



##########################################
# XML Parsers                            #
##########################################

# Apache Xerces 1.0.1+ (http://xml.apache.com/)
parser = org.apache.cocoon.parser.XercesParser

# SUN ProjectX TR2 (http://java.sun.com/xml/)
#parser = org.apache.cocoon.parser.SunXMLParser

# Indicate whether the XML file should be validated or not
# this is turned off by default for faster operation.
parser.validate = false


##########################################
# XSLT Transformers                      #
##########################################

# Apache Xalan (http://xml.apache.org/)
transformer = org.apache.cocoon.transformer.XalanTransformer

# James Clark's XT (http://www.jclark.com/)
#transformer = org.apache.cocoon.transformer.XTTransformer



##########################################
# XML Producers                          #
##########################################

# For example, if you want to produce your XML template reading it from
# the file system, using your producer, you should request the URI:
#   http://your.site.com/your_XML_file.xml?producer=file

# This is the request parameter used to identify the producer in the request:
# (default value is "producer")
producer.parameter = producer

# The syntax for this is
#   producer.type.xxx = full.class.name
# where "xxx" is the producer indentier used in the request
producer.type.file = org.apache.cocoon.producer.ProducerFromFile

# This is used in the example files
producer.type.dummy = org.apache.cocoon.example.DummyProducer

# When producer indication is present in the request
# this configuration allows to map those requests to a particular
# producer indicated here with its type.
# NOTE: this type must present in the above map.
producer.default = file





##########################################
# XML Processors                         #
##########################################

# These are used when the <?cocoon-process type="xxx"?> PI is present.
# If no PI of that type is present, no processing is performed.
# The syntax for this is
#   processor.type.xxx = full.class.name

# XSL Transformations (XSLT)
processor.type.xslt = org.apache.cocoon.processor.xslt.XSLTProcessor

# SQL Processor
processor.type.sql = org.apache.cocoon.processor.sql.SQLProcessor

# LDAP Processor
# NOTE: you need to have the SUN JDNI API (jndi.jar) in your classpath
# in order for this processor to work. Check the FAQ for more information.
#processor.type.ldap = org.apache.cocoon.processor.ldap.LdapProcessor

# XInclude Processor
processor.type.xinclude = org.apache.cocoon.processor.xinclude.XIncludeProcessor

##########################################
# XSP Processor                          #
##########################################

# eXtensible Server Pages Processor (XSP)
processor.type.xsp = org.apache.cocoon.processor.xsp.XSPProcessor

# supported languages
processor.xsp.languages = java

# Default encoding to be used for code generation and compilation
# If omitted, the platform's default encoding will be used
# This encoding should also be used in:
#   - The XSP document <?xml?> declaration
#   - The "encoding" configuration property of the formatter to be used
# Example: Russian uses "Cp1251"
# processor.xsp.encoding = Cp1251

# support for the java language
processor.xsp.java.processor = org.apache.cocoon.processor.xsp.language.java.XSPJavaProcessor
processor.xsp.java.processor.compiler = org.apache.cocoon.processor.xsp.language.java.SunJavaCompiler
#processor.xsp.java.processor.compiler = org.apache.cocoon.processor.xsp.language.java.JikesJavaCompiler
processor.xsp.java.logicsheet = xsp-java.xsl
processor.xsp.java.preprocessor = org.apache.cocoon.processor.xsp.language.java.XSPJavaPreprocessor


# sets the repository where the compiled pages are stored.
# NOTE: make sure the directory is readable. This directory is usually
# relative to the web server's or to the servlet engine's. In case you're not
# sure, use an absolute location.
# WARNING: since this repository may contain information you want to remain
# secret, we highly suggest that you protect the repository from untrusted
# access, even read-only. Only Cocoon and the system administrators should
# have access here.
