/*
 * aoserv-daemon - Server management daemon for the AOServ Platform.
 * Copyright (C) 2000-2009, 2018, 2019, 2021, 2022  AO Industries, Inc.
 *     support@aoindustries.com
 *     7262 Bull Pen Cir
 *     Mobile, AL 36695
 *
 * This file is part of aoserv-daemon.
 *
 * aoserv-daemon is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * aoserv-daemon is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with aoserv-daemon.  If not, see <https://www.gnu.org/licenses/>.
 */
package com.aoindustries.aoserv.daemon.monitor;

import com.aoindustries.aoserv.client.net.Bind;
import com.aoindustries.aoserv.client.NetProtocol;
import com.aoindustries.aoserv.daemon.AOServDaemon;
import com.aoindustries.aoserv.daemon.AOServDaemonConfiguration;
import com.aoapps.collections.SortedArrayList;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

/**
 * TODO: Move this to NOC
 *
 * The configuration for all AOServ processes is stored in a properties file.
 *
 * @author  AO Industries, Inc.
 */
final public class NetStatMonitor implements Runnable {

  private static final String[] netstat={"/bin/netstat", "-ln"};

  /**
   * The minimum delay between scans.
   */
  public static final int MIN_DELAY=5*60*1000;

  /**
   * The minimum delay after an error occurs.
   */
  public static final int MIN_ERROR_DELAY=15*60*1000;

  /**
   * The maximum delay between scans.
   */
  public static final int MAX_DELAY=15*60*1000;

  private static Thread thread;

  private NetStatMonitor() {
  }

  private static int getRandomDelay() {
    return MIN_DELAY+AOServDaemon.getFastRandom().nextInt(MAX_DELAY-MIN_DELAY);
  }

  public void run() {
    while (!Thread.currentThread().isInterrupted()) {
      try {
        while (!Thread.currentThread().isInterrupted()) {
          try {
            Thread.sleep(getRandomDelay());
          } catch (InterruptedException err) {
            LogFactory.getLogger(this.getClass()).log(Level.WARNING, null, err);
            // Restore the interrupted status
            Thread.currentThread().interrupt();
            break;
          }

          // Get the current list of binds for this server
          List<Bind> nbs=AOServDaemon.getThisAOServer().getServer().getNetBinds();

          // Build a ArrayList that will be trimmed as matches are found
          List<Bind> dbBinds=new ArrayList<Bind>(nbs.size());
          for (int c=0;c<nbs.size();c++) dbBinds.add(nbs.get(c));

          // Keep track of net binds that are returned by netstat but not in dbBinds
          List<NetStat> extraBinds=new ArrayList<NetStat>();

          // Parse through each net bind returned by netstat
          Process P=Runtime.getRuntime().exec(netstat);
          try {
            P.getOutputStream().close();
            BufferedReader in=new BufferedReader(new InputStreamReader(P.getInputStream()));
            try {
              List<NetStat> allNetStats=new SortedArrayList<NetStat>();
              String line;
              while ((line=in.readLine())!=null) {
                NetStat netStat=NetStat.parseNetStat(line);
                if (netStat!=null) {
                  // Skip port 1 raw
                  if (netStat.port!=1 || !netStat.net_protocol.equals(NetProtocol.RAW)) {
                    // Must be unique to continue
                    if (!allNetStats.contains(netStat)) {
                      allNetStats.add(netStat);
                      // Find one or more matches and remove, otherwise add to extra bind info
                      boolean found=false;
                      for (int c=0;c<dbBinds.size();c++) {
                        Bind nb=dbBinds.get(c);
                        if (
                           nb.getIPAddress().getIPAddress().equals(netStat.ip_address)
                           && nb.getNetProtocol().getProtocol().equals(netStat.net_protocol)
                           && nb.getPort().getPort()==netStat.port
                        ) {
                          dbBinds.remove(c);
                          c--;
                          found=true;
                        }
                      }
                      if (!found) extraBinds.add(netStat);
                    }
                  }
                }
              }
            } finally {
              in.close();
            }
          } finally {
            int retCode=P.waitFor();
            if (retCode!=0) throw new IOException("Non-zero return code from /bin/netstat: "+retCode);
          }

          // Report and discrepancy
          int missing=0;
          for (int c=0;c<dbBinds.size();c++) {
            Bind dbBind=dbBinds.get(c);
            if (dbBind.isMonitoringEnabled()) missing++;
          }
          int extra=extraBinds.size();
          if (missing!=0 || extra!=0) {
            StringBuilder SB=new StringBuilder();
            SB.append("Discrepancies found in netstat -ln:");
            if (missing!=0) SB.append(" missing ").append(missing).append(missing==1?" net bind":" net binds");
            if (extra!=0) {
              if (missing!=0) SB.append(" and");
              SB.append(" found ").append(extra).append(" extra net ").append(extra==1?"bind":"binds");
            }
            SB.append('\n');
            for (int c=0;c<dbBinds.size();c++) {
              Bind nb=dbBinds.get(c);
              if (nb.isMonitoringEnabled()) {
                SB.append("Missing: ").append(nb.getNetProtocol()).append(' ').append(nb.getIPAddress().getIPAddress()).append(':').append(nb.getPort()).append('\n');
              }
            }
            for (int c=0;c<extra;c++) {
              NetStat ns=extraBinds.get(c);
              SB.append("Extra: ").append(ns.net_protocol).append(' ').append(ns.ip_address).append(':').append(ns.port).append('\n');
            }
            AOServDaemon.reportFullMonitoringMessage(SB.toString());
          }
        }
      } catch (ThreadDeath TD) {
        throw TD;
      } catch (Throwable T) {
        LogFactory.getLogger(this.getClass()).log(Level.SEVERE, null, T);
        try {
          Thread.sleep(Math.max(MIN_ERROR_DELAY, getRandomDelay()));
        } catch (InterruptedException err) {
          LogFactory.getLogger(this.getClass()).log(Level.WARNING, null, err);
          // Restore the interrupted status
          Thread.currentThread().interrupt();
        }
      }
    }
  }

  public static void start() throws IOException, SQLException {
    // Avoid netstat monitoring when nested or in failover mode
    if (AOServDaemonConfiguration.isManagerEnabled(NetStatMonitor.class) && !AOServDaemonConfiguration.isNested() && AOServDaemon.getThisAOServer().getFailoverServer()==null) {
      synchronized (System.out) {
        if (thread==null) {
          System.out.print("Starting NetStatMonitor: ");
          (thread=new Thread(new NetStatMonitor())).start();
          System.out.println("Done");
        }
      }
    }
  }
}
